#include <bits/stdc++.h>
using namespace std;

/*
貪欲法でこの問題を解くことが出来ます。
計算量はソートがボトルネックとなってO(NlogN)です。
1. 今ある中で最も大きいおもちゃをおもちゃi, 最も大きい箱を箱jとおく。
2. Ai < Bjである場合：おもちゃiを箱jに入れるのが最適である。おもちゃの集合からおもちゃiを除き、箱の集合から箱jを除いたうえで、ステップ1に戻る。
3. Ai > Bjである場合：今あるどの箱にもおもちゃiを入れることが出来ないので、大きさAi以上の箱を新しく購入する必要がある。大きさがAiより大きい箱を買うメリットはないので、
x=Aiとした上で上記の判定法を適用し、条件を満たすならば答えはAi、満たさないならば-1である
なお、この貪欲法の動作を観察すれば、以下のような簡単な方法で答えを求められることも分かります
1. A,Bそれぞれを昇順にソートする
2. Ai > Biなるi(1 <= i <= N-1)が存在する場合：答えは-1
3. そうでない場合、Ai+1 > Biなる最大のi(1 <= i <= N-1)(存在しなければ0)をi'として、答えはAi+1

*/

int main() {
    int n;
    cin >> n;
    vector<int> a(n), b(n-1);
    for (int &i : a) cin >> i;
    for (int &i : b) cin >> i;

    sort(a.begin(), a.end());
    sort(b.begin(), b.end());

    for (int i = 0; i < n-1; i++) {
        if (a[i] > b[i]) {
            cout << -1 << '\n';
            return 0;
        }
    }

    for (int i = n-2; i >= 0; i--) {
        if (a[i+1] > b[i]) {
            cout << a[i+1] << '\n';
            return 0;
        }
    }
    cout << a[0] << '\n';
}